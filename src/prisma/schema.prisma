// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(uuid())
  username             String
  firstname            String
  lastname             String
  password             String
  email                String
  role                 UserRole
  contact              String?
  gender               Gender
  latitude             Float?
  longitude            Float?
  company              Company?             @relation(fields: [company_id], references: [id])
  company_id           String?
  team                 Team?                @relation(fields: [team_id], references: [id])
  team_id              String?
  sample_distributions SampleDistribution[]
  pharmacy_activity    PharmacyActivity[]
  doctor_activity      DoctorActivity[]
  daily_plans          DailyPlan[]
  monthly_plans        MonthlyPlan[]
  facility             Facility[]
  supervisor_profile   SupervisorProfile?
  supervisor_id        String?              @unique
  manager_profile      ManagerProfile?
  manager_id           String?              @unique
  medical_rep_profile  MedicalRepProfile?
  medical_rep_id       String?              @unique
  date_of_joining      DateTime             @default(now())
  updatedAt            DateTime?            @updatedAt
  Procurement          Procurement[]
}

model SupervisorProfile {
  id            String     @id @default(uuid())
  bio           String?
  user          User       @relation(fields: [userUser_id], references: [id])
  userUser_id   String     @unique
  supervisor    Supervisor @relation(fields: [supervisor_id], references: [id])
  supervisor_id String
}

model ManagerProfile {
  id                String  @id @default(uuid())
  bio               String?
  user              User    @relation(fields: [userUser_id], references: [id])
  manager           Manager @relation(fields: [managerManager_id], references: [id])
  userUser_id       String  @unique
  managerManager_id String
}

model MedicalRepProfile {
  id                       String     @id @default(uuid())
  bio                      String?
  user                     User       @relation(fields: [userUser_id], references: [id])
  medRep                   MedicalRep @relation(fields: [medicalRepMedical_rep_id], references: [id])
  userUser_id              String     @unique
  medicalRepMedical_rep_id String
}

model Profile {
  id              String        @id @default(uuid())
  bio             String?
  doctor          Doctor?       @relation(fields: [doctor_id], references: [id])
  doctor_id       String?       @unique
  gender          Gender
  date_of_joining DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  Procurement     Procurement[]
}

model Supervisor {
  id                 String              @id @default(uuid())
  supervisor_name    String
  supervisor_profile SupervisorProfile[]
  date_of_joining    DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
}

model Manager {
  id              String           @id @default(uuid())
  manager_name    String
  ManagerProfile  ManagerProfile[]
  date_of_joining DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
}

model MedicalRep {
  id                String              @id @default(uuid())
  medical_rep_name  String
  MedicalRepProfile MedicalRepProfile[]
  date_of_joining   DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt
}

model Company {
  id              String    @id @default(uuid())
  company_name    String
  location        String
  latitude        Float?
  longitude       Float?
  products        Product[]
  users           User[]
  date_of_joining DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model Product {
  id                       String               @id @default(uuid())
  product_name             String
  company_id               String
  company                  Company              @relation(fields: [company_id], references: [id])
  stock_trackings          StockTracking[]
  team_products            TeamProduct[]
  sample_distributions     SampleDistribution[]
  updatedAt                DateTime?            @updatedAt
  doctor_activity          DoctorActivity?      @relation("focussedProduct")
  doctor_activity_id       String?
  general_product_activity DoctorActivity[]     @relation("productsDetailed")
  PharmacyActivity         PharmacyActivity?    @relation(fields: [pharmacyActivityId], references: [id])
  pharmacyActivityId       String?
  Procurement              Procurement?         @relation(fields: [procurementId], references: [id])
  procurementId            String?
}

model Doctor {
  id                   String               @id @default(uuid())
  doctor_name          String
  speciality           String[]
  facility             Facility[]
  location             String
  town                 String
  contact              String?
  sample_distributions SampleDistribution[]
  profile              Profile?
  date_of_joining      DateTime             @default(now())
  updatedAt            DateTime?            @updatedAt
  DoctorActivity       DoctorActivity[]
}

model Pharmacy {
  id               String             @id @default(uuid())
  pharmacy_name    String
  location         String
  description      String?
  stock_trackings  StockTracking[]
  updatedAt        DateTime?          @updatedAt
  PharmacyActivity PharmacyActivity[]
  Procurement      Procurement[]
}

model Team {
  id               String        @id @default(uuid())
  team_name        String
  users            User[]
  team_products    TeamProduct[]
  monthly_plans    MonthlyPlan[]
  date_of_creation DateTime      @default(now())
  updatedAt        DateTime?     @updatedAt
}

model TeamProduct {
  team_id    String
  product_id String
  team       Team    @relation(fields: [team_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])

  @@id([team_id, product_id])
}

model StockTracking {
  pharmacy_id      String
  product_id       String
  date             DateTime           @default(now())
  pharmacy         Pharmacy           @relation(fields: [pharmacy_id], references: [id])
  product          Product            @relation(fields: [product_id], references: [id])
  PharmacyActivity PharmacyActivity[]
  quantity         Int

  @@id([pharmacy_id, product_id, date])
}

model SampleDistribution {
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
  doctor        Doctor   @relation(fields: [doctor_id], references: [id])
  doctor_id     String
  product       Product  @relation(fields: [product_id], references: [id])
  product_id    String
  samples_given Int
  date          DateTime @default(now())

  @@id([user_id, doctor_id, product_id, date])
}

model DoctorActivity {
  id                 String    @id @default(uuid())
  user               User      @relation(fields: [user_id], references: [id])
  user_id            String
  doctor             Doctor    @relation(fields: [doctor_id], references: [id])
  doctor_id          String
  date               DateTime  @default(now())
  products_detailed  Product[] @relation("productsDetailed")
  focused_product    Product   @relation("focussedProduct", fields: [focused_product_id], references: [id])
  focused_product_id String    @unique
  samples_given      Int
}

model PharmacyActivity {
  id                       String        @id @default(uuid())
  user                     User          @relation(fields: [user_id], references: [id])
  user_id                  String
  pharmacy                 Pharmacy      @relation(fields: [pharmacy_id], references: [id])
  pharmacy_id              String
  date                     DateTime      @default(now())
  products_in_stock        Product[]
  stock_tracking           StockTracking @relation(fields: [stockTrackingPharmacy_id, stockTrackingProduct_id, stockTrackingDate], references: [pharmacy_id, product_id, date])
  stockTrackingPharmacy_id String
  stockTrackingProduct_id  String
  stockTrackingDate        DateTime
}

model Procurement {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String
  pharmacy    Pharmacy? @relation(fields: [pharmacy_id], references: [id])
  pharmacy_id String?
  facility    Facility? @relation(fields: [facility_id], references: [id])
  facility_id String?
  date        DateTime
  products    Product[]
  profile     Profile   @relation(fields: [profileId], references: [id])
  profileId   String
}

model DailyPlan {
  user       User      @relation(fields: [user_id], references: [id])
  user_id    String
  date       DateTime  @default(now())
  activities String
  updatedAt  DateTime? @updatedAt

  @@id([user_id, date])
}

model MonthlyPlan {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [user_id], references: [id])
  user_id    String
  date       DateTime  @default(now())
  activities String
  updatedAt  DateTime? @updatedAt
  team       Team[]
}

model Facility {
  id          String        @id @default(uuid())
  name        String
  location    String
  description String?
  latitude    Float?
  longitude   Float?
  doctor_id   String?
  doctor      Doctor?       @relation(fields: [doctor_id], references: [id])
  users       User[]
  updatedAt   DateTime?     @updatedAt
  Procurement Procurement[]
}

enum UserRole {
  Supervisor
  Manager
  MedicalRep
  USER
  COUNTRY_MGR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
